#!/usr/bin/env ruby

require 'highline/import'
require 'thor'
require 'ovpn'

class OvpnCLI < Thor
  include OpenVPN

  desc "start PROFILE", "start openvpn with a profile"
  def start name
    ps = find_profiles name
    if ps.empty?
      puts "Can't find any profile matching '#{name}' in '#{PATH}'."
      return
    end

    if ps.length == 1
      start_profile ps[0]
    else
      start_profile choose_one(ps)
    end
  end

  desc "ps", "list all running openvpn profiles"
  def ps
    ps = get_running_profiles
    if ps.empty?
      puts "No running profiles found (that were started with this script)"
    else
      puts ps.map{|p| p[0]+" (pid: #{p[1]})"}.join("\n")
    end
  end

  desc "list", "list all available openvpn profiles"
  def list
    ls = get_available_profiles
    ps = get_running_profiles
    if ls.empty?
      puts "No profiles found in path '#{PATH}'."
    else
      puts ls.sort.
        map{|p| [p,pid_of(p,ps)]}.
        map{|p| (p[1].nil?) ? p[0] : "\e[32;1m"+p[0]+" (pid: #{p[1]})\e[0m"}.
        join("\n")
    end
  end

  desc "stop PROFILE", "stop a running openvpn profile"
  def stop name = nil
    if name.nil?
      get_running_profiles.each{|p| stop_profile p[0], p[1]}
      return
    end

    ps = get_running_profiles.find_all{|p| p[0] =~ /#{name}/}
    if ps.empty?
      puts "No running profile found matching '#{name}'."
    elsif ps.length == 1
      stop_profile ps[0][0], ps[0][1]
    else
      choice = choose_one(ps.map{|i| i[0]})
      stop_profile choice, ps.find{|i| i[0] == choice}[1]
    end
  end

  private 

  def choose_one choices
    a = ''
    cs = (1..choices.length).to_a.map{|i| i.to_s}
    prompt = cs.zip(choices).map{|i| " #{i[0]}: #{i[1]}"}.join("\n")
    until cs.include?(a) || a == "q"
      a = ask("#{prompt}\nEnter your choice (q for quit): "){ |q| q.case = :downcase }
    end
    (a == "q") ? nil : choices[a.to_i - 1]
  end

end

OvpnCLI::start(ARGV)